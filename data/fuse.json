{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Knowledge Base","n":0.707},"1":{"v":"\n## Development notes\n\n### Dendron\n\nNotes are stored with [Dendron](https://wiki.dendron.so/)\n\nInstall Dendron cli\n\n```bash\nnpm install -g @dendronhq/dendron-cli@latest\n```\n","n":0.277}}},{"i":2,"$":{"0":{"v":"Tools","n":1}}},{"i":3,"$":{"0":{"v":"IntelliJ","n":1},"1":{"v":"\nTried to create python intepreter in WSL2 on Windows 11 Host with Ubuntu OS. This doesn't work and IntelliJ errors when gradle project gets imported\n\nIntelliJ promts to the right JDK location for WSL2 and when I choose correct GraalVM JDK it hangs\n\n![](/assets/images/2022-09-04-02-33-07.png)\n","n":0.154}}},{"i":4,"$":{"0":{"v":"Kotlin","n":1},"1":{"v":"\n### KMongo\n\nLibrary to work with MongoDB\n\n### [Koin](https://insert-koin.io/)\n\nSmall dependency injection library written in kotlin\n\n```kotlin\nfun main() {\n  startKoin {\n    modules(myModule)\n  }\n}\n```\n","n":0.229}}},{"i":5,"$":{"0":{"v":"Libraries","n":1}}},{"i":6,"$":{"0":{"v":"ktlint","n":1},"1":{"v":"\n> Anti-bikeshedding Kotlin linter\n","n":0.5}}},{"i":7,"$":{"0":{"v":"Build","n":1}}},{"i":8,"$":{"0":{"v":"Gradle","n":1},"1":{"v":"\nSimple Kotlin application in Gradle\n\nIn build.gradle.kts\n\n```kotlin\n/*\n * Setup application and kotlin plugins\n */\n\nplugins {\n  application\n  kotlin(\"jvm\") version \"1.7.10\"\n}\n\napplication {\n  mainClass.set(\"MainKt\")\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n\n}\n\n```\n","n":0.209}}},{"i":9,"$":{"0":{"v":"Java","n":1},"1":{"v":"\n### Logstash\n\nThis utility is part of ElasticSearch/OpenSearch stack can help with real time processing of events\n\nCan be using as part of ETL to accept denormalized events, process them and move events to data store or search index\n\n### Quarkus\n\nSet of technology, libraries, frameworks optimized for native kubernetes runtime\n\n### Armeria\n\nJava microservice framework developed by creator of Netty\n\n### GraalVM\n\nPolyglot JVM. Can execute other language with one compiler.\nNashorn JavaScript engine is not included in OpenJDK. Oracle and GraalVM have `ScriptEngineManager` class\n\nPractical use cases:\n\n- Safely evaluate JavaScript from Java\n- There is an interop between languages\n  - Execution context can be set before evaluation\n  - Resulting values can be extracted after evalution\n\n[[java.graalvm.scriptengine]]\n\n### Liquibase\n\nFramework for database migrations and schema upgrades. It has a plugin for MongoDB\n","n":0.092}}},{"i":10,"$":{"0":{"v":"Quarkus","n":1},"1":{"v":"\n- During build time Quarkus removes classes that won't be need at a runtime.\n\n- Quarkus tries to avoid reflection to reduce startup time.\n\n- Native executables have first-class support. Quarkus uses agressive dead-code elimination techniques to only embed the part of the JVM and classes that\n  are absolutely required by an application.\n\n## Reactive architechture\n\n[Reactive Manifesto](https://www.reactivemanifesto.org/)\n\nReactive Systems as distributed systems having four characteristics:\n\n- Responsive - they must respond in a timely fashion\n- Elastic - they adapt themselves to the fluctiating load\n- Resilient - they handle failures gracefully\n- Asynchronous message passing - the component of a reactive system interact using messages\n\n### How does Quarkus enables Reactive\n\nUnder the hood, Quarkus has a reactive design. It is using Eclipse Vert.x and Netty, handles the non-blocking I/O interactions.\n\n### There are two ways how to write reactive code in Quarkus\n\n- Reactive Programming with [Mutiny](https://smallrye.io/smallrye-mutiny)\n\n  - An intuitive, event-driven reactive programming library.\n\n- Coroutines with Kotlin\n\n  - Co-routines are a way to write asynchronous code sequentially.\n","n":0.08}}},{"i":11,"$":{"0":{"v":"Graalvm","n":1},"1":{"v":"\n> Java Virtual Machine based on HotSpot/OpenJDK.\n","n":0.378}}},{"i":12,"$":{"0":{"v":"VisualVM","n":1},"1":{"v":"\nVisualVM includes heap analysis features for the supported guest languages.\n","n":0.316}}},{"i":13,"$":{"0":{"v":"Script Engine","n":0.707},"1":{"v":"\n## Code snippet for JavaScript execution with GraalVM\n\n\n```kotlin\nimport org.graalvm.polyglot.Context\nimport org.graalvm.polyglot.Value\n\nfun main() {\n  Context.create().use { context ->\n    val function: Value = context.eval(\"js\", \"\"\"\n      (\n        function square(param) {\n          return param * param;\n        }\n      )\n    \"\"\".trimIndent())\n    assert(function.canExecute())\n    val x: Int = function.execute(41).asInt()\n    println(x)\n  }\n}\n```\n","n":0.156}}},{"i":14,"$":{"0":{"v":"Python","n":1},"1":{"v":"\nArm chipped MacOS doesn't have a build for python intepreter in GraalVM\n\nWhen I tried to list available packages\n\n```bash\ngu list\n```\n\nThis didn't give any relevant results\n\nPython is available in Linux\n\n```bash\ngu available\nDownloading: Component catalog from www.graalvm.org\nComponentId              Version             Component name                Stability                     Origin\n---------------------------------------------------------------------------------------------------------------------------------\nespresso                 22.2.0              Java on Truffle               Supported                     github.com\nespresso-llvm            22.2.0              Java on Truffle LLVM Java librSupported                     github.com\njs                       22.2.0              Graal.js                      Supported                     github.com\nllvm                     22.2.0              LLVM Runtime Core             Experimental                  github.com\nllvm-toolchain           22.2.0              LLVM.org toolchain            Supported                     github.com\nnative-image             22.2.0              Native Image                  Early adopter                 github.com\nnodejs                   22.2.0              Graal.nodejs                  Supported                     github.com\npython                   22.2.0              Graal.Python                  Experimental                  github.com\nR                        22.2.0              FastR                         Experimental                  github.com\nruby                     22.2.0              TruffleRuby                   Experimental                  github.com\nvisualvm                 22.2.0              VisualVM                      Experimental                  github.com\nwasm                     22.2.0              GraalWasm                     Experimental                  github.com\n```\n\nIt needs additional dependency: `llvm-toolchain`\n\nSo using IntelliJ didn't work out with WSL2\nI can try to use vscode to compile and run simple code directly with kotlin compiler\n\n```bash\n# install\nsdk install kotlin\n# compile a file\nkotlinc main.kt\n# execute\nkotlin MainKt.class\n\n```\n\nSo it works with simple gradle setup, here is the snippet\n\n```kotlin\nimport org.graalvm.polyglot.Context\n\nfun main() {\n  Context.create().use { context ->\n    val function = context.eval(\"python\", \"\"\"\nlambda total_units, price_per_unit: \\\n  total_units * price_per_unit if total_units < 1000 else \\\n    total_units * price_per_unit if total_units < 2000 else \\\n      50000\n\"\"\");\n    print(function.execute(1002, 1).asInt())\n  }\n}\n```\n\n","n":0.075}}},{"i":15,"$":{"0":{"v":"GraphQL","n":1},"1":{"v":"\n> GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\n","n":0.13}}},{"i":16,"$":{"0":{"v":"Database","n":1},"1":{"v":"\n### MongoDB\n\nNoSQL database\n","n":0.577}}}]}
